/***********************************************************************************************************************
 *
 * Copyright (c) 2020, ABB Schweiz AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with
 * or without modification, are permitted provided that
 * the following conditions are met:
 *
 *    * Redistributions of source code must retain the
 *      above copyright notice, this list of conditions
 *      and the following disclaimer.
 *    * Redistributions in binary form must reproduce the
 *      above copyright notice, this list of conditions
 *      and the following disclaimer in the documentation
 *      and/or other materials provided with the
 *      distribution.
 *    * Neither the name of ABB nor the names of its
 *      contributors may be used to endorse or promote
 *      products derived from this software without
 *      specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ***********************************************************************************************************************
 */

#ifndef ABB_EGM_RWS_MANAGERS_UTILITIES_H
#define ABB_EGM_RWS_MANAGERS_UTILITIES_H

#include <cmath>

#include "abb_egm_rws_managers_export.h"

#include "robot_controller_description.pb.h" // Generated by Google Protocol Buffer compiler protoc.

#include "data_containers.h"

namespace abb
{
namespace robot
{

/**
 * \brief Various constant values.
 */
struct ABB_EGM_RWS_MANAGERS_EXPORT Constants
{
  /**
   * \brief Conversion value from radians to degrees.
   */
  static constexpr double RAD_TO_DEG{180.0/M_PI};

  /**
   * \brief Conversion value from degrees to radians.
   */
  static constexpr double DEG_TO_RAD{M_PI/180.0};

  /**
   * \brief Conversion value from millimeter to meter.
   */
  static constexpr double MM_TO_M{0.001};

  /**
   * \brief Conversion value from meter to millimeter.
   */
  static constexpr double M_TO_MM{1000.0};

  /**
   * \brief Identifier for if a mechanical unit has/is an integrated unit.
   *
   * Note: Using assignment initialization, instead of initializer list, due to compilation issue with MSVC:
   *       https://developercommunity.visualstudio.com/content/problem/447124/compilation-fails-with-brace-initializer-for-const.html
   */
  static constexpr char NO_INTEGRATED_UNIT[] = "NoIntegratedUnit";
};

/**
 * \brief Finds a named mechanical unit group in a robot controller's description.
 *
 * \param name of the group to find.
 * \param description to search through.
 *
 * \return MechanicalUnitGroup containing a copy of the group.
 *
 * \throw std::runtime_error if the group could not be found.
 */
MechanicalUnitGroup findMechanicalUnitGroup(const std::string& name, const RobotControllerDescription& description);

/**
 * \brief Initializes a motion data representation based on the description of a robot controller.
 *
 * \param motion_data representation to initialize.
 * \param description of the robot controller.
 *
 * \throw std::runtime_error if the initialization failed (e.g. number of axes are not equal to number of joints).
 */
void initializeMotionData(MotionData& motion_data, const RobotControllerDescription& description);

/**
 * \brief Creates a summary text of a robot controller description.
 *
 * \return std::string containing the summary.
 */
std::string summaryText(const RobotControllerDescription& description);

}
}

#endif
